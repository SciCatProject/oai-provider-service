name: Create Release

on:
  push:
    branches:
      - release

env:
  NODE_VERSION: 20.x
  RELEASE_BRANCH: release

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    outputs:
      new_tag: ${{ steps.bare_tag_version.outputs.tag }}
      changelog: ${{ steps.tag_version.outputs.changelog }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      ## Commit message examples for Release type (patch|minor|major) can be found:
      ## https://github.com/mathieudutour/github-tag-action
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          release_branches: ${{ env.RELEASE_BRANCH }}
          dry_run: true

      - name: Strip 'v' from the tag
        id: bare_tag_version
        run: |
          TAG=${{ steps.tag_version.outputs.new_tag }}
          WITHOUT_V=${TAG#v}
          echo "tag=$WITHOUT_V" >> $GITHUB_OUTPUT

      - name: Version update and tag
        id: version_update_and_tag
        run: |
          git config --global user.email "version.update@github.workflow.com"
          git config --global user.name "Version update in release workflow"
          npm version ${{ steps.bare_tag_version.outputs.tag }}   # now commits & tags with your identity
          git push --follow-tags
          echo "commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        
      - name: Create a GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}
          commit: ${{ steps.version_update_and_tag.outputs.commit }}

      ## The setup-qemu-action simplifies the setup of QEMU for cross-platform builds
      ## https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Node.js dependencies
        run: npm ci

      ## The metadata-action dynamically generates and manages metadata for Docker images,
      ## like tags and labels, based on the provided inputs and workflow context.
      ## https://github.com/docker/metadata-action
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=stable
            type=raw,value=${{ steps.tag_version.outputs.new_tag }}
            type=semver,pattern={{version}}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
